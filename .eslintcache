[{"/Users/erdincka/Desktop/ecp-spray/src/reportWebVitals.js":"1","/Users/erdincka/Desktop/ecp-spray/src/Azure.js":"2","/Users/erdincka/Desktop/ecp-spray/src/NavBar.js":"3","/Users/erdincka/Desktop/ecp-spray/src/kvm_config.js":"4","/Users/erdincka/Desktop/ecp-spray/src/kvm_requires.js":"5","/Users/erdincka/Desktop/ecp-spray/src/aws_requires.js":"6","/Users/erdincka/Desktop/ecp-spray/src/Notify.js":"7","/Users/erdincka/Desktop/ecp-spray/src/Aws.js":"8","/Users/erdincka/Desktop/ecp-spray/src/Kvm.js":"9","/Users/erdincka/Desktop/ecp-spray/src/kvm_requirements.js":"10","/Users/erdincka/Desktop/ecp-spray/src/helpers.js":"11","/Users/erdincka/Desktop/ecp-spray/src/Platforms.js":"12","/Users/erdincka/Desktop/ecp-spray/src/azure_requires.js":"13","/Users/erdincka/Desktop/ecp-spray/src/Home.js":"14","/Users/erdincka/Desktop/ecp-spray/src/vmware_requires.js":"15","/Users/erdincka/Desktop/ecp-spray/src/App.js":"16","/Users/erdincka/Desktop/ecp-spray/src/VMWare.js":"17","/Users/erdincka/Desktop/ecp-spray/src/defaultHost.js":"18","/Users/erdincka/Desktop/ecp-spray/src/host_target.js":"19"},{"size":362,"mtime":1607527626098,"results":"20","hashOfConfig":"21"},{"size":9109,"mtime":1611649332865,"results":"22","hashOfConfig":"21"},{"size":1015,"mtime":1608754836624,"results":"23","hashOfConfig":"21"},{"size":1836,"mtime":1610382575507,"results":"24","hashOfConfig":"21"},{"size":380,"mtime":1611647662770,"results":"25","hashOfConfig":"21"},{"size":1903,"mtime":1611701469505,"results":"26","hashOfConfig":"21"},{"size":1144,"mtime":1610143920847,"results":"27","hashOfConfig":"21"},{"size":7862,"mtime":1611701834734,"results":"28","hashOfConfig":"21"},{"size":3978,"mtime":1611572202402,"results":"29","hashOfConfig":"21"},{"size":4503,"mtime":1610548771564,"results":"30","hashOfConfig":"21"},{"size":2896,"mtime":1611647913338,"results":"31","hashOfConfig":"21"},{"size":1189,"mtime":1611695693669,"results":"32","hashOfConfig":"21"},{"size":2598,"mtime":1610145873855,"results":"33","hashOfConfig":"21"},{"size":1062,"mtime":1610019472858,"results":"34","hashOfConfig":"21"},{"size":2475,"mtime":1611570644991,"results":"35","hashOfConfig":"21"},{"size":2836,"mtime":1611570756536,"results":"36","hashOfConfig":"21"},{"size":6478,"mtime":1611651383174,"results":"37","hashOfConfig":"21"},{"size":261,"mtime":1608800892929,"results":"38","hashOfConfig":"21"},{"size":5648,"mtime":1611571423936,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7c5nne",{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"/Users/erdincka/Desktop/ecp-spray/src/reportWebVitals.js",[],"/Users/erdincka/Desktop/ecp-spray/src/Azure.js",["89"],"import React from 'react';\nimport { Box, Button, FormField, Heading, Layer, Select, Text, TextInput } from 'grommet';\nimport { sendError, sendOutput, commandToCheck, runMultiCommand, installNeeded, getCommandOutput, runCommand, saveToStore, readFromStore } from './helpers';\nimport { required } from './azure_requires';\nimport { Next, StatusGood, StatusWarning, Windows } from 'grommet-icons';\nimport { Spinning } from 'grommet-controls';\n\nexport function Azure() {\n  const [ ready, setReady ] = React.useState(false);\n  const [ config, setConfig ] = React.useState({});\n  const [ subscription, setSubscription ] = React.useState({});\n  const [ loading, setLoading ] = React.useState(false);\n  const [ commands, setCommands ] = React.useState([]);\n  const [ regions, setRegions ] = React.useState([]);\n  const [ region, setRegion ] = React.useState({});\n  const [ epicurl, setEpicurl ] = React.useState('');\n  const repodir = './ezmeral-demo-azure-terraform';\n  const repourl = 'https://github.com/erdincka/ezmeral-demo-azure-terraform.git';\n  // Workaround for my M1 MacOS\n  const tfcommand = (cmd) => 'TF_IN_AUTOMATION=true arch -x86_64 terraform ' + cmd + ' -no-color -input=false '\n\n  React.useEffect(() => {\n    const fetchData = async () => {\n      // Initialize for local execution\n      await saveToStore('host.isremote', JSON.stringify(false));\n\n      // Set config values from store, or from cli if missing\n      let azure = JSON.parse(await readFromStore('azure'));\n      // get cli settings, if not exist in stored values\n      if (! azure.subscriptions) {\n        setLoading(true);\n        runCommand('az login')\n          .then(res => {\n            saveToStore('azure.subscriptions', JSON.stringify(JSON.parse(res)));\n            setLoading(false);\n          })\n          .catch( error => sendError(error.message) && setLoading(false) );\n      }\n      setConfig(azure);\n\n      if (! azure.regions) { // TODO: requires az to be available, returns error if az not found\n        setLoading(true);\n        runCommand('az account list-locations --query \\'[].{DisplayName:displayName, Name:name}\\' -o json')\n          .then(res => {\n            saveToStore('azure.regions', JSON.stringify(JSON.parse(res)));\n            setLoading(false);\n          })\n          .catch( error => sendError(error.message) && setLoading(false) );\n      }\n      setRegions(azure.regions);\n      if ( azure.region ) setRegion(azure.region);\n      if ( azure.epicurl ) setEpicurl(azure.epicurl);\n      \n      // Check if requirements are available\n      let cmds = [];\n      required.forEach( group => group.needs.forEach( need => cmds.push(commandToCheck(need)) ) );\n      setLoading(true);\n      runMultiCommand(cmds)\n        .then(result => {\n          let [ out, err ] = getCommandOutput(result);\n          if (err) sendError(err) && setLoading(false);\n          if (out) {\n            sendOutput(out);\n            let found = [];\n            out.split('\\n').forEach(line => {\n              if (line.match(/^\\/\\w+/)) // if path starts with / (returned from which command)\n              found.push(line.trim().split('/').pop()); // extract command name from path\n            });\n            setCommands(found);\n            setLoading(false);\n          }\n        });\n    };\n    fetchData();\n  }, []);\n\n  const verifyNeed = async (n) => {\n    const need = JSON.parse(n);\n    setLoading(true);\n    let result = await installNeeded(need);\n    setLoading(false);\n    if (result) {\n      setCommands(old => [...old, need.command]);\n    }\n  }\n\n  const subscriptionSelected = (s) => {\n    if (! s['servicePrinciple']) {\n      setLoading(true);\n      runMultiCommand([\n        'az account set --subscription=\"' + s.id + '\"',\n        'az ad sp create-for-rbac --role=\"Contributor\" --scopes=\"/subscriptions/' + s.id + '\" -o json'\n      ])\n      .then(res => {\n        sendOutput(res);\n        s['servicePrinciple'] = JSON.parse(res);\n        let c = config;\n        c.subscriptions[c.subscriptions.findIndex(item => item.id === s.id)] = s;\n        saveToStore('azure', JSON.stringify(c));\n        setLoading(false);\n      })\n      .catch(error => sendError(error.message));\n    }\n    setSubscription(s);\n  }\n  \n  const prepare = () => {\n    saveToStore('azure.region', JSON.stringify(region.Name));\n    saveToStore('azure.epicurl', JSON.stringify(epicurl));\n    let commands = [\n      '[ -d ' + repodir + ' ] || git clone ' + repourl + ' ' + repodir,\n      'pushd ' + repodir + ' > /dev/null', // enter the repodir\n      // 'cp ./etc/postcreate.sh_template ./etc/postcreate.sh',\n      'sed -i \\'\\' \\'s/^subscription_id.*=.*$/subscription_id = \"' + subscription.id + '\"/\\' ./etc/bluedata_infra.tfvars',\n      'sed -i \\'\\' \\'s/^client_id.*=.*$/client_id = \"' + subscription.servicePrinciple.appId + '\"/\\' ./etc/bluedata_infra.tfvars',\n      'sed -i \\'\\' \\'s/^client_secret.*=.*$/client_secret = \"' + subscription.servicePrinciple.password + '\"/\\' ./etc/bluedata_infra.tfvars',\n      'sed -i \\'\\' \\'s/^tenant_id.*=.*$/tenant_id = \"' + subscription.tenantId + '\"/\\' ./etc/bluedata_infra.tfvars',\n      'sed -i \\'\\' \\'s/^region.*=.*$/region = \"' + region.Name + '\"/\\' ./etc/bluedata_infra.tfvars',\n      'sed -i \\'\\' -- \\'s|^epic_dl_url.*=.*$|epic_dl_url = \"' + epicurl.replace(/\\&/g, '\\\\&') + '\"|\\' ./etc/bluedata_infra.tfvars', // escape url string with |\n    ];\n    // if ( config.region !== 'eu-west-1' ) commands.push('sed -i \\'\\' \\'s/eu-west-1/' + config.region + '/g\\' ./etc/bluedata_infra.tfvars'); \n    commands.push('echo tfvars updated');\n    commands.push(tfcommand('init'));\n    commands.push('popd > /dev/null'); // exit the repodir\n    runMultiCommand(commands)\n      .then(result => sendOutput(result) && setReady(true))\n      .catch(err => sendError(err.message));\n  }\n\n  const deploy = () => {\n    let commands = [\n      'pushd ' + repodir + ' > /dev/null',\n      // workaround for my M1 Mac\n      'PATH=\"$PATH\":\"$(python3 -m site --user-base)/bin\" arch -x86_64 ./bin/azure_create_new.sh',\n      'popd > /dev/null'\n    ]\n    runMultiCommand(commands)\n      .then(result => {\n        sendOutput(result);\n      })\n      .catch(error => sendError(error.message));\n  }\n\n  return (\n    <Box gap='small' pad='xsmall' fill flex={false}>\n    { loading && <Layer animation='fadeIn' onEsc={ setLoading(false) } ><Spinning size='large' /></Layer> }\n    {\n      required.map(req => \n        <Box key={req.group} pad='small'>\n          <Heading level='5' margin='none' color='neutral-2'>{req.group}</Heading>\n          { \n            req.needs && req.needs.map( need => \n              <Box margin='small' direction='row' key={ need.command } justify='between' align='center' >\n                <Text >{ need.command }</Text>\n                <Box direction='row' align='center'>\n                  <Button \n                    disabled={ loading || commands.includes(need.command) } \n                    label={ commands.includes(need.command) ? 'Ready' : 'Install' }\n                    color={ commands.includes(need.command) ? '' : 'plain' }\n                    id={ JSON.stringify(need) }\n                    onClick={ event => verifyNeed(event.target.id) }\n                  />\n                  { commands.includes(need.command) ? <StatusGood color='status-ok' /> : <StatusWarning color='status-warning' />}\n                </Box>\n              </Box>\n            )\n          }\n        </Box>\n      )\n    }\n    \n    { // display if all requirements are met\n    (required.map(group => group.needs.map(n => n.command)).flat().length === commands.length) && \n    <Box>\n      <FormField name='subscription' htmlfor='subscription' label='Azure Subscription' required >\n        <Select\n          id='subscription'\n          options={ config.subscriptions }\n          children={ (option, index, status) => option.name }\n          labelKey='name'\n          placeholder='Select subscription'\n          required\n          disabledKey={ (option) => option.state !== 'Enabled' }\n          onChange={({ option }) => subscriptionSelected(option)}\n          />\n      </FormField>\n      <FormField name='regions' htmlfor='regions' label='Azure Region' required >\n        <Select\n          id='regions'\n          options={ regions }\n          children={ (option, index, status) => option.DisplayName }\n          labelKey='name'\n          placeholder='Select region'\n          required\n          onChange={({ option }) => setRegion(option)}\n          />\n      </FormField>\n      <FormField name='epic_dl_url' htmlfor='epic_dl_url' label='EPIC Download URL' required >\n        <TextInput id='epic_dl_url' name='epic_dl_url' value={ epicurl } onChange={ event => setEpicurl(event.target.value ) } />\n      </FormField>\n\n      <Button label='Prepare' \n        secondary \n        hoverIndicator \n        icon={ <Next /> } reverse \n        disabled={ ! subscription.servicePrinciple }\n        onClick={ () => prepare() }\n      />\n    </Box>\n    }\n\n    {\n      ready && \n      <Button \n        onClick={ () => deploy() }\n        type='button' \n        color='plain' \n        label='Deploy on Azure' \n        icon={ <Windows /> } />\n    }\n  </Box>\n  )\n}",["90","91"],"/Users/erdincka/Desktop/ecp-spray/src/NavBar.js",[],["92","93"],"/Users/erdincka/Desktop/ecp-spray/src/kvm_config.js",[],["94","95"],"/Users/erdincka/Desktop/ecp-spray/src/kvm_requires.js",[],"/Users/erdincka/Desktop/ecp-spray/src/aws_requires.js",[],"/Users/erdincka/Desktop/ecp-spray/src/Notify.js",[],"/Users/erdincka/Desktop/ecp-spray/src/Aws.js",["96"],"/Users/erdincka/Desktop/ecp-spray/src/Kvm.js",["97"],"import React, { useState } from 'react';\nimport { Box, Button, Layer, Text } from 'grommet';\nimport Config from './kvm_config';\nimport Target from './host_target';\nimport Requirements from './kvm_requirements';\nimport { StatusGood, StatusWarning } from 'grommet-icons';\nimport { Previous } from 'grommet-icons';\nimport { readFromStore, runCommand, sendError, sendOutput } from './helpers';\nimport { Spinning } from 'grommet-controls';\n\nexport const Kvm = () => {\n  const [ ready, setReady ] = useState(false);\n  const [ page, setPage ] = useState('target');\n  const [ loading, setLoading ] = React.useState(false);\n\n  const deploy = async () => {    \n    const repodir = 'hcp-demo-kvm-shell';\n\n    const replace = (obj) => {\n      let patterns = [];\n      Object.keys(obj).forEach( val => {\n        const replaceVal = '\\'s+^' + val + '=.*$+' + val + '=\"' + obj[val] + '\"+\\'';\n        patterns.push(replaceVal);\n      })\n      return patterns;\n    }\n\n    setLoading(true);\n\n    runCommand('[ -d '+ repodir + ' ] || git clone -q https://github.com/erdincka/hcp-demo-kvm-shell.git ' + repodir)\n    .then( async res => {\n      // cancel if we can't find repo files\n      if (res.stderr) {\n        sendError(res.stderr);\n      }\n      else { // safe to proceed\n        let kvm = JSON.parse(await readFromStore('kvm'));\n\n        // TODO: implement CIDR in original kvm scripts\n        [ kvm.GATW_PUB_IP, kvm.GATW_PUB_PREFIX ] = kvm.GATW_PUB_CIDR.split('/');\n        delete kvm.GATW_PUB_CIDR;\n        // TODO: implement full hostname in original kvm scripts\n        const [ host, ...domain ] = kvm.GATW_PUB_FQDN.split('.');\n        kvm.GATW_PUB_HOST = host;\n        kvm.PUBLIC_DOMAIN = domain.join('.');\n        delete kvm.GATW_PUB_FQDN;\n        // TODO: implement URL desconstruction in original kvm scripts\n        kvm.CENTOS_FILENAME = kvm.CENTOS_DL_URL.split('/').pop();\n        kvm.EPIC_FILENAME = kvm.EPIC_DL_URL.split('/').pop();\n\n        // combine all replacements in single command\n        const cmd = 'sed -i -e ' + replace(kvm).join(' -e ') +  ' ./' + repodir + '/etc/kvm_config.sh';\n        \n        runCommand(cmd)\n          .then(res => {\n            if (res.stdout) sendOutput(res.stdout);\n            if (res.stderr) sendError(res.stderr) && setLoading(false);\n            else {\n              runCommand(`pushd ${repodir}; TERM=xterm PATH=$PATH:$(python3 -m site --user-base)/bin ./kvm_create_new.sh; popd`)\n              .then( res => {\n                // console.dir(res);\n                setLoading(false);\n                if (res.stdout) sendOutput(res.stdout);\n                if (res.stderr) sendError(res.stderr);\n              })\n              .catch( err => sendError(err.message));\n            }\n          })\n          .catch(err => sendError(err.message));\n      }\n    });\n  }\n\n  return (\n    <Box fill pad='small'>\n      { loading && <Layer animation='fadeIn' ><Spinning size='large' /></Layer> }\n      <Box direction='row' justify='between' align='center'>\n        {/* <Button \n          hoverIndicator\n          label='Go back' plain\n          icon={ <Previous />}\n          onClick={ () => setPage('target') }\n        /> */}\n        <Text weight='bold'\n          margin='none'\n        >\n        { page === 'target' ? 'Target' : page === 'requirements' ? 'Requirements' : 'KVM Settings' }\n        </Text>\n        { ready ? <StatusGood color='status-ok' /> : <StatusWarning color='status-warning' /> }\n      </Box>\n\n      {\n        page === 'target' &&\n        <Target setParent={ (t) => { if (t) setPage('requirements') } } />\n      }\n      \n      { page === 'requirements' &&\n          <Requirements setParent={ (t) => { if (t) setPage('kvm') } } />\n        }\n      {\n        page === 'kvm' &&\n        <Config conf={ page } setParent={ (t) => { if (t) setReady(true) } } />\n      }\n      {\n        ready &&\n        <Button \n          onClick={ () => deploy() }\n          primary\n          label='Start deployment' \n        />\n      }\n    </Box>\n  );\n}\n",["98","99"],"/Users/erdincka/Desktop/ecp-spray/src/kvm_requirements.js",[],["100","101"],"/Users/erdincka/Desktop/ecp-spray/src/helpers.js",[],"/Users/erdincka/Desktop/ecp-spray/src/Platforms.js",[],["102","103"],"/Users/erdincka/Desktop/ecp-spray/src/azure_requires.js",[],["104","105"],"/Users/erdincka/Desktop/ecp-spray/src/Home.js",[],["106","107"],"/Users/erdincka/Desktop/ecp-spray/src/vmware_requires.js",[],"/Users/erdincka/Desktop/ecp-spray/src/App.js",[],"/Users/erdincka/Desktop/ecp-spray/src/VMWare.js",["108","109","110","111"],"/Users/erdincka/Desktop/ecp-spray/src/defaultHost.js",[],"/Users/erdincka/Desktop/ecp-spray/src/host_target.js",[],["112","113"],{"ruleId":"114","severity":1,"message":"115","line":119,"column":82,"nodeType":"116","messageId":"117","endLine":119,"endColumn":83,"suggestions":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"119","replacedBy":"123"},{"ruleId":"121","replacedBy":"124"},{"ruleId":"119","replacedBy":"125"},{"ruleId":"121","replacedBy":"126"},{"ruleId":"114","severity":1,"message":"115","line":90,"column":71,"nodeType":"116","messageId":"117","endLine":90,"endColumn":72,"suggestions":"127"},{"ruleId":"128","severity":1,"message":"129","line":7,"column":10,"nodeType":"130","messageId":"131","endLine":7,"endColumn":18},{"ruleId":"119","replacedBy":"132"},{"ruleId":"121","replacedBy":"133"},{"ruleId":"119","replacedBy":"134"},{"ruleId":"121","replacedBy":"135"},{"ruleId":"119","replacedBy":"136"},{"ruleId":"121","replacedBy":"137"},{"ruleId":"119","replacedBy":"138"},{"ruleId":"121","replacedBy":"139"},{"ruleId":"119","replacedBy":"140"},{"ruleId":"121","replacedBy":"141"},{"ruleId":"128","severity":1,"message":"142","line":3,"column":33,"nodeType":"130","messageId":"131","endLine":3,"endColumn":37},{"ruleId":"128","severity":1,"message":"143","line":4,"column":127,"nodeType":"130","messageId":"131","endLine":4,"endColumn":138},{"ruleId":"114","severity":1,"message":"115","line":63,"column":74,"nodeType":"116","messageId":"117","endLine":63,"endColumn":75,"suggestions":"144"},{"ruleId":"145","severity":1,"message":"146","line":93,"column":7,"nodeType":"116","messageId":"147","endLine":93,"endColumn":87},{"ruleId":"119","replacedBy":"148"},{"ruleId":"121","replacedBy":"149"},"no-useless-escape","Unnecessary escape character: \\&.","Literal","unnecessaryEscape",["150","151"],"no-native-reassign",["152"],"no-negated-in-lhs",["153"],["152"],["153"],["152"],["153"],["154","155"],"no-unused-vars","'Previous' is defined but never used.","Identifier","unusedVar",["152"],["153"],["152"],["153"],["152"],["153"],["152"],["153"],["152"],["153"],"'Form' is defined but never used.","'getPlatform' is defined but never used.",["156","157"],"no-template-curly-in-string","Unexpected template string expression.","unexpectedTemplateExpression",["152"],["153"],{"messageId":"158","fix":"159","desc":"160"},{"messageId":"161","fix":"162","desc":"163"},"no-global-assign","no-unsafe-negation",{"messageId":"158","fix":"164","desc":"160"},{"messageId":"161","fix":"165","desc":"163"},{"messageId":"158","fix":"166","desc":"160"},{"messageId":"161","fix":"167","desc":"163"},"removeEscape",{"range":"168","text":"169"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"170","text":"171"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"172","text":"169"},{"range":"173","text":"171"},{"range":"174","text":"169"},{"range":"175","text":"171"},[5252,5253],"",[5252,5252],"\\",[3983,3984],[3983,3983],[2749,2750],[2749,2749]]