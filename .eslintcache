[{"/Users/erdincka/Documents/ecp-spray/src/index.js":"1","/Users/erdincka/Documents/ecp-spray/src/Home.js":"2","/Users/erdincka/Documents/ecp-spray/src/Azure.js":"3","/Users/erdincka/Documents/ecp-spray/src/Target.js":"4","/Users/erdincka/Documents/ecp-spray/src/defaultHost.js":"5","/Users/erdincka/Documents/ecp-spray/src/Kvm_Requires.js":"6","/Users/erdincka/Documents/ecp-spray/src/NavBar.js":"7","/Users/erdincka/Documents/ecp-spray/src/Notify.js":"8","/Users/erdincka/Documents/ecp-spray/src/Config.js":"9","/Users/erdincka/Documents/ecp-spray/src/Kvm.js":"10","/Users/erdincka/Documents/ecp-spray/src/Platforms.js":"11","/Users/erdincka/Documents/ecp-spray/src/Aws.js":"12","/Users/erdincka/Documents/ecp-spray/src/App.js":"13","/Users/erdincka/Documents/ecp-spray/src/KVM_Prereq.js":"14"},{"size":478,"mtime":1607527626097,"results":"15","hashOfConfig":"16"},{"size":1121,"mtime":1608038218612,"results":"17","hashOfConfig":"16"},{"size":93,"mtime":1607527626096,"results":"18","hashOfConfig":"16"},{"size":5767,"mtime":1608118202205,"results":"19","hashOfConfig":"16"},{"size":240,"mtime":1607548600423,"results":"20","hashOfConfig":"16"},{"size":2148,"mtime":1608543987620,"results":"21","hashOfConfig":"16"},{"size":656,"mtime":1608030770616,"results":"22","hashOfConfig":"16"},{"size":1144,"mtime":1607690114151,"results":"23","hashOfConfig":"16"},{"size":2250,"mtime":1608122506177,"results":"24","hashOfConfig":"16"},{"size":3396,"mtime":1608496307327,"results":"25","hashOfConfig":"16"},{"size":847,"mtime":1607527626097,"results":"26","hashOfConfig":"16"},{"size":91,"mtime":1607527626096,"results":"27","hashOfConfig":"16"},{"size":2912,"mtime":1608496899052,"results":"28","hashOfConfig":"16"},{"size":5361,"mtime":1608561637186,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"17i07ly",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"41"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/erdincka/Documents/ecp-spray/src/index.js",[],["66","67"],"/Users/erdincka/Documents/ecp-spray/src/Home.js",[],["68","69"],"/Users/erdincka/Documents/ecp-spray/src/Azure.js",[],["70","71"],"/Users/erdincka/Documents/ecp-spray/src/Target.js",[],["72","73"],"/Users/erdincka/Documents/ecp-spray/src/defaultHost.js",[],"/Users/erdincka/Documents/ecp-spray/src/Kvm_Requires.js",[],"/Users/erdincka/Documents/ecp-spray/src/NavBar.js",[],["74","75"],"/Users/erdincka/Documents/ecp-spray/src/Notify.js",[],["76","77"],"/Users/erdincka/Documents/ecp-spray/src/Config.js",[],["78","79"],"/Users/erdincka/Documents/ecp-spray/src/Kvm.js",["80","81"],"import React, { useState } from 'react';\nimport { Box, Accordion, AccordionPanel, Button, Text } from 'grommet';\nimport Config from './Config';\nimport Target from './Target';\nimport Requirements from './KVM_Prereq';\nimport { StatusGood, StatusWarning } from 'grommet-icons';\n\nexport const Kvm = () => {\n  const [ target, setTarget ] = useState(undefined);\n  const [ prerequisites, setPrerequisites ] = useState(undefined);\n  const [ ezmeral, setEzmeral ] = useState(undefined);\n  const [ kvmconfig, setKvmconfig ] = useState(undefined);\n  const { ipcRenderer } = window.require(\"electron\");\n\n  const deploy = async () => {\n    // const host = JSON.parse(await ipcRenderer.invoke('get-store-value', 'host'));\n    const ezmeral = JSON.parse(await ipcRenderer.invoke('get-store-value', 'ezmeral'));\n    const kvm = JSON.parse(await ipcRenderer.invoke('get-store-value', 'kvm'));\n    \n    const repodir = 'hcp-demo-kvm-shell';\n\n    const replace = () => {\n      Object.keys(ezmeral).forEach( val => {\n        const replaceVal = 'sed -i \\'s+' + val + '=+' + val + '=' + ezmeral[val] + '+\\' ./' + repodir + '/etc/kvm_config.sh';\n        console.dir(replaceVal);\n        // ipcRenderer.invoke('get-system', 'execute-command', replaceVal);\n      })\n    }\n\n    ipcRenderer.invoke('get-system', 'execute-command', '[ -d '+ repodir + ' ] || git clone https://github.com/erdincka/hcp-demo-kvm-shell.git ' + repodir)\n    .then( res => {\n      // cancel if we can't find repo files\n      if (res.stderr) {\n        ipcRenderer.invoke('app-message', 'error', res.stderr);\n      }\n      else { // safe to proceed\n        console.dir('safe to proceed');\n      }\n    })\n  }\n\n  return (\n    <Box fill pad='small' overflow='scroll'>\n      <Accordion>\n        <AccordionPanel header={\n          <Box direction='row' justify='between' pad='small'>\n            <Text>Target</Text>\n            { target ? <StatusGood color='status-ok' /> : <StatusWarning color='status-warning' /> }\n          </Box>}>\n          <Target setter={ (t) => setTarget(t) } />\n        </AccordionPanel>\n        { target &&\n          <AccordionPanel header={\n            <Box direction='row' justify='between' pad='small'>\n              <Text>KVM Settings</Text>\n              { kvmconfig ? <StatusGood color='status-ok' /> : <StatusWarning color='status-warning' /> }\n            </Box>}>\n            <Config conf='kvm' setter={ (k) => setKvmconfig(k) } />\n          </AccordionPanel>\n        }\n        { kvmconfig &&\n          <AccordionPanel header={\n            <Box direction='row' justify='between' pad='small'>\n              <Text>Pre-requisites</Text>\n              { prerequisites ? <StatusGood color='status-ok' /> : <StatusWarning color='status-warning' /> }\n            </Box>}>\n            <Requirements setter={ (p) => setPrerequisites(p) } />\n          </AccordionPanel>\n        }\n        { prerequisites &&\n        <AccordionPanel header={\n          <Box direction='row' justify='between' pad='small'>\n            <Text>Ezmeral</Text>\n            { ezmeral ? <StatusGood color='status-ok' /> : <StatusWarning color='status-warning' /> }\n          </Box>}>\n          <Config conf='ezmeral' setter={ (e) => setEzmeral(e) } />\n        </AccordionPanel>\n        }\n      {\n        ezmeral &&\n        <Button \n        onClick={ () => deploy() }\n        label='Start deployment' \n        />\n      }\n      </Accordion>\n    </Box>\n  );\n\n}","/Users/erdincka/Documents/ecp-spray/src/Platforms.js",[],"/Users/erdincka/Documents/ecp-spray/src/Aws.js",[],"/Users/erdincka/Documents/ecp-spray/src/App.js",[],"/Users/erdincka/Documents/ecp-spray/src/KVM_Prereq.js",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"82","replacedBy":"86"},{"ruleId":"84","replacedBy":"87"},{"ruleId":"82","replacedBy":"88"},{"ruleId":"84","replacedBy":"89"},{"ruleId":"82","replacedBy":"90"},{"ruleId":"84","replacedBy":"91"},{"ruleId":"82","replacedBy":"92"},{"ruleId":"84","replacedBy":"93"},{"ruleId":"82","replacedBy":"94"},{"ruleId":"84","replacedBy":"95"},{"ruleId":"82","replacedBy":"96"},{"ruleId":"84","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":18,"column":11,"nodeType":"100","messageId":"101","endLine":18,"endColumn":14},{"ruleId":"98","severity":1,"message":"102","line":22,"column":11,"nodeType":"100","messageId":"101","endLine":22,"endColumn":18},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],["103"],["104"],["103"],["104"],["103"],["104"],["103"],["104"],["103"],["104"],["103"],["104"],"no-unused-vars","'kvm' is assigned a value but never used.","Identifier","unusedVar","'replace' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]