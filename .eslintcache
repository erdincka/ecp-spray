[{"/Users/erdincka/Desktop/ecp-spray/src/reportWebVitals.js":"1","/Users/erdincka/Desktop/ecp-spray/src/Azure.js":"2","/Users/erdincka/Desktop/ecp-spray/src/NavBar.js":"3","/Users/erdincka/Desktop/ecp-spray/src/kvm_config.js":"4","/Users/erdincka/Desktop/ecp-spray/src/kvm_requires.js":"5","/Users/erdincka/Desktop/ecp-spray/src/aws_requires.js":"6","/Users/erdincka/Desktop/ecp-spray/src/Notify.js":"7","/Users/erdincka/Desktop/ecp-spray/src/Aws.js":"8","/Users/erdincka/Desktop/ecp-spray/src/Kvm.js":"9","/Users/erdincka/Desktop/ecp-spray/src/kvm_requirements.js":"10","/Users/erdincka/Desktop/ecp-spray/src/helpers.js":"11","/Users/erdincka/Desktop/ecp-spray/src/Platforms.js":"12","/Users/erdincka/Desktop/ecp-spray/src/azure_requires.js":"13","/Users/erdincka/Desktop/ecp-spray/src/Home.js":"14","/Users/erdincka/Desktop/ecp-spray/src/vmware_requires.js":"15","/Users/erdincka/Desktop/ecp-spray/src/App.js":"16","/Users/erdincka/Desktop/ecp-spray/src/VMWare.js":"17","/Users/erdincka/Desktop/ecp-spray/src/defaultHost.js":"18","/Users/erdincka/Desktop/ecp-spray/src/host_target.js":"19"},{"size":362,"mtime":1607527626098,"results":"20","hashOfConfig":"21"},{"size":8678,"mtime":1611784515859,"results":"22","hashOfConfig":"21"},{"size":1015,"mtime":1608754836624,"results":"23","hashOfConfig":"21"},{"size":1892,"mtime":1611783362433,"results":"24","hashOfConfig":"21"},{"size":159,"mtime":1611702328504,"results":"25","hashOfConfig":"21"},{"size":1854,"mtime":1611701979165,"results":"26","hashOfConfig":"21"},{"size":1144,"mtime":1610143920847,"results":"27","hashOfConfig":"21"},{"size":7872,"mtime":1611784458594,"results":"28","hashOfConfig":"21"},{"size":3403,"mtime":1611814169404,"results":"29","hashOfConfig":"21"},{"size":4155,"mtime":1611702698091,"results":"30","hashOfConfig":"21"},{"size":3114,"mtime":1611916010298,"results":"31","hashOfConfig":"21"},{"size":1189,"mtime":1611784184003,"results":"32","hashOfConfig":"21"},{"size":2173,"mtime":1611702125288,"results":"33","hashOfConfig":"21"},{"size":1062,"mtime":1610019472858,"results":"34","hashOfConfig":"21"},{"size":2179,"mtime":1611822405471,"results":"35","hashOfConfig":"21"},{"size":2836,"mtime":1611570756536,"results":"36","hashOfConfig":"21"},{"size":7276,"mtime":1611916584730,"results":"37","hashOfConfig":"21"},{"size":261,"mtime":1608800892929,"results":"38","hashOfConfig":"21"},{"size":5615,"mtime":1611750989675,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"7c5nne",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"/Users/erdincka/Desktop/ecp-spray/src/reportWebVitals.js",[],["89","90"],"/Users/erdincka/Desktop/ecp-spray/src/Azure.js",["91"],"import React from 'react';\nimport { Box, Button, FormField, Layer, Select, Text, TextInput } from 'grommet';\nimport { sendError, sendOutput, commandToCheck, runMultiCommand, installNeeded, getCommandOutput, runCommand, saveToStore, readFromStore } from './helpers';\nimport { required } from './azure_requires';\nimport { Next, StatusGood, StatusWarning, Windows } from 'grommet-icons';\nimport { Spinning } from 'grommet-controls';\nimport { Platforms } from './Platforms';\n\nexport function Azure() {\n  const [ ready, setReady ] = React.useState(false);\n  const [ config, setConfig ] = React.useState({});\n  const [ subscription, setSubscription ] = React.useState({});\n  const [ loading, setLoading ] = React.useState(false);\n  const [ commands, setCommands ] = React.useState([]);\n  const [ regions, setRegions ] = React.useState([]);\n  const [ region, setRegion ] = React.useState({});\n  const [ epicurl, setEpicurl ] = React.useState('');\n\n  const repourl = Platforms.find(p => p.name === 'azure').url;\n  const repodir = repourl.split('/').slice(-1); // './ezmeral-demo-azure-terraform';\n  \n  const tfcommand = (cmd) => 'TF_IN_AUTOMATION=true terraform ' + cmd + ' -no-color -input=false '\n\n  React.useEffect(() => {\n    const fetchData = async () => {\n      // Initialize for local execution\n      await saveToStore('host.isremote', JSON.stringify(false));\n\n      // Set config values from store, or from cli if missing\n      let azure = JSON.parse(await readFromStore('azure'));\n      // get cli settings, if not exist in stored values\n      if (! azure.subscriptions) {\n        setLoading(true);\n        runCommand('az login')\n          .then(res => {\n            saveToStore('azure.subscriptions', JSON.stringify(JSON.parse(res)));\n            setLoading(false);\n          })\n          .catch( error => sendError(error.message) && setLoading(false) );\n      }\n      setConfig(azure);\n\n      if (! azure.regions) { // TODO: requires az to be available, returns error if az not found\n        setLoading(true);\n        runCommand('az account list-locations --query \\'[].{DisplayName:displayName, Name:name}\\' -o json')\n          .then(res => {\n            saveToStore('azure.regions', JSON.stringify(JSON.parse(res)));\n            setLoading(false);\n          })\n          .catch( error => sendError(error.message) && setLoading(false) );\n      }\n      setRegions(azure.regions);\n      if ( azure.region ) setRegion(azure.region);\n      if ( azure.epicurl ) setEpicurl(azure.epicurl);\n      \n      // Check if requirements are available\n      let cmds = [];\n      required.forEach( need => cmds.push(commandToCheck(need)) );\n      setLoading(true);\n      runMultiCommand(cmds)\n        .then(result => {\n          let [ out, err ] = getCommandOutput(result);\n          if (err) sendError(err) && setLoading(false);\n          if (out) {\n            sendOutput(out);\n            let found = [];\n            out.split('\\n').forEach(line => {\n              if (line.match(/^\\/\\w+/)) // if path starts with / (returned from which command)\n              found.push(line.trim().split('/').pop()); // extract command name from path\n            });\n            setCommands(found);\n            setLoading(false);\n          }\n        });\n    };\n    fetchData();\n  }, []);\n\n  const verifyNeed = async (n) => {\n    const need = JSON.parse(n);\n    setLoading(true);\n    let result = await installNeeded(need);\n    setLoading(false);\n    if (result) {\n      setCommands(old => [...old, need.command]);\n    }\n  }\n\n  const subscriptionSelected = (s) => {\n    if (! s['servicePrinciple']) {\n      setLoading(true);\n      runMultiCommand([\n        'az account set --subscription=\"' + s.id + '\"',\n        'az ad sp create-for-rbac --role=\"Contributor\" --scopes=\"/subscriptions/' + s.id + '\" -o json'\n      ])\n      .then(res => {\n        sendOutput(res);\n        s['servicePrinciple'] = JSON.parse(res);\n        let c = config;\n        c.subscriptions[c.subscriptions.findIndex(item => item.id === s.id)] = s;\n        saveToStore('azure', JSON.stringify(c));\n        setLoading(false);\n      })\n      .catch(error => sendError(error.message));\n    }\n    setSubscription(s);\n  }\n  \n  const prepare = () => {\n    saveToStore('azure.region', JSON.stringify(region));\n    saveToStore('azure.epicurl', JSON.stringify(epicurl));\n    let commands = [\n      '[ -d ' + repodir + ' ] || git clone -q ' + repourl + ' ' + repodir,\n      'pushd ' + repodir + ' > /dev/null', // enter the repodir\n      // 'cp ./etc/postcreate.sh_template ./etc/postcreate.sh',\n      'sed -i.bak \\'s/^subscription_id.*=.*$/subscription_id = \"' + subscription.id + '\"/\\' ./etc/bluedata_infra.tfvars',\n      'sed -i.bak \\'s/^client_id.*=.*$/client_id = \"' + subscription.servicePrinciple.appId + '\"/\\' ./etc/bluedata_infra.tfvars',\n      'sed -i.bak \\'s/^client_secret.*=.*$/client_secret = \"' + subscription.servicePrinciple.password + '\"/\\' ./etc/bluedata_infra.tfvars',\n      'sed -i.bak \\'s/^tenant_id.*=.*$/tenant_id = \"' + subscription.tenantId + '\"/\\' ./etc/bluedata_infra.tfvars',\n      'sed -i.bak \\'s/^region.*=.*$/region = \"' + region.Name + '\"/\\' ./etc/bluedata_infra.tfvars',\n      'sed -i.bak \\'s|^epic_dl_url.*=.*$|epic_dl_url = \"' + epicurl.replace(/\\&/g, '\\\\&') + '\"|\\' ./etc/bluedata_infra.tfvars', // escape url string with |\n    ];\n    // if ( config.region !== 'eu-west-1' ) commands.push('sed -i \\'\\' \\'s/eu-west-1/' + config.region + '/g\\' ./etc/bluedata_infra.tfvars'); \n    commands.push('echo tfvars updated');\n    commands.push(tfcommand('init'));\n    commands.push('popd > /dev/null'); // exit the repodir\n    runMultiCommand(commands)\n      .then(result => sendOutput(result) && setReady(true))\n      .catch(err => sendError(err.message));\n  }\n\n  const deploy = () => {\n    let commands = [\n      'pushd ' + repodir + ' > /dev/null',\n      'PATH=\"$PATH\":\"$(python3 -m site --user-base)/bin\" ./bin/azure_create_new.sh',\n      'popd > /dev/null'\n    ]\n    runMultiCommand(commands)\n      .then(result => {\n        sendOutput(result);\n      })\n      .catch(error => sendError(error.message));\n  }\n\n  return (\n    <Box gap='xsmall' fill flex={false}>\n    { loading && <Layer animation='fadeIn' onEsc={ setLoading(false) } ><Spinning size='large' /></Layer> }\n    {\n      required.map(need => \n        <Box margin='xxsmall' direction='row' key={ need.command } justify='between' align='center' >\n          <Text >{ need.command }</Text>\n          <Box direction='row' align='center'>\n            <Button \n              disabled={ loading || commands.includes(need.command) } \n              label={ commands.includes(need.command) ? 'Ready' : 'Install' }\n              color={ commands.includes(need.command) ? '' : 'plain' }\n              id={ JSON.stringify(need) }\n              onClick={ event => verifyNeed(event.target.id) }\n            />\n            { commands.includes(need.command) ? <StatusGood color='status-ok' /> : <StatusWarning color='status-warning' />}\n          </Box>\n        </Box>\n      )\n    }\n    \n    { // display if all requirements are met\n    (required.length === commands.length) && \n    <Box>\n      <FormField name='subscription' htmlfor='subscription' label='Azure Subscription' required >\n        <Select\n          id='subscription'\n          options={ config.subscriptions }\n          children={ (option) => option.name }\n          labelKey='name'\n          placeholder='Select subscription'\n          required\n          disabledKey={ (option) => option.state !== 'Enabled' }\n          onChange={({ option }) => subscriptionSelected(option)}\n          />\n      </FormField>\n      <FormField name='regions' htmlfor='regions' label='Azure Region' required >\n        <Select\n          id='regions'\n          options={ regions }\n          children={ (option) => option.DisplayName }\n          labelKey='DisplayName'\n          valueKey='Name'\n          placeholder='Select region'\n          required\n          onChange={ ({ option }) => setRegion(option.Name) }\n          />\n      </FormField>\n      <FormField name='epic_dl_url' htmlfor='epic_dl_url' label='EPIC Download URL' required >\n        <TextInput id='epic_dl_url' name='epic_dl_url' value={ epicurl } onChange={ event => setEpicurl(event.target.value ) } />\n      </FormField>\n\n      { subscription.servicePrinciple && region && \n        <Button label='Prepare' \n          secondary \n          hoverIndicator \n          icon={ <Next /> } reverse \n          onClick={ () => prepare() }\n        />}\n    </Box>\n    }\n\n    {\n      ready && \n      <Button \n        onClick={ () => deploy() }\n        type='button' \n        color='plain' \n        label='Deploy on Azure' \n        icon={ <Windows /> } />\n    }\n  </Box>\n  )\n}",["92","93"],"/Users/erdincka/Desktop/ecp-spray/src/NavBar.js",[],["94","95"],"/Users/erdincka/Desktop/ecp-spray/src/kvm_config.js",[],"/Users/erdincka/Desktop/ecp-spray/src/kvm_requires.js",[],"/Users/erdincka/Desktop/ecp-spray/src/aws_requires.js",[],"/Users/erdincka/Desktop/ecp-spray/src/Notify.js",[],["96","97"],"/Users/erdincka/Desktop/ecp-spray/src/Aws.js",["98"],"import { Box, Button, Layer, Select, Text, TextInput } from 'grommet';\nimport React from 'react';\nimport { sendError, sendOutput, commandToCheck, runMultiCommand, installNeeded, getCommandOutput, sendStatus, runCommand, saveToStore, readFromStore } from './helpers';\nimport { required } from './aws_requires';\nimport { Amazon, Next, StatusGood, StatusWarning } from 'grommet-icons';\nimport { Spinning } from 'grommet-controls';\nimport { Platforms } from './Platforms';\n\nexport const Aws = () => {\n  const [ ready, setReady ] = React.useState(false);\n  const [ loading, setLoading ] = React.useState(false);\n  const [ commands, setCommands ] = React.useState([]);\n  const [ regions, setRegions ] = React.useState([]);\n  const [ accesskey, setAccesskey ] = React.useState('');\n  const [ secretkey, setSecretkey ] = React.useState('');\n  const [ region, setRegion ] = React.useState('');\n  const [ epicurl, setEpicurl ] = React.useState('');\n  const [ user, setUser ] = React.useState('');\n\n  const repourl = Platforms.find(p => p.name === 'aws').url;\n  const repodir = repourl.split('/').slice(-1); //'./hcp-demo-env-aws-terraform';\n\n  const tfcommand = (cmd) => 'TF_IN_AUTOMATION=true terraform ' + cmd + ' -no-color -input=false '\n\n  React.useEffect(() => {\n    const fetchData = async () => {\n      // Initialize for local execution\n      await saveToStore('host.isremote', JSON.stringify(false));\n      // Get regions for configured AMIs\n      let response = await fetch('https://raw.githubusercontent.com/hpe-container-platform-community/hcp-demo-env-aws-terraform/master/bluedata_infra_variables.tf');\n      if (response.ok) {\n        let result = (await response.text()).split('\\n');\n        let amis_start = result.findIndex(item => item.includes('variable \"EC2_CENTOS7_AMIS')) + 3;\n        let amis_end = result.slice(amis_start).findIndex( item => item.includes('}'));\n        const regions = result.slice(amis_start, amis_start + amis_end).map( item => item.split('=')[0].trim());\n        setRegions(regions);\n      }\n      else {\n        sendError(response.status);\n      }\n      // Set config values from store, or from cli if missing\n      let aws = JSON.parse(await readFromStore('aws'));\n      // get cli settings, if not exist in stored values\n      setLoading(true);\n      [ 'access_key', 'secret_key', 'region' ].forEach(async key => {\n        if (! aws[key]) aws[key] = (await runCommand('aws --output json configure get ' + key)).trim();\n      });\n      setLoading(false);\n      if (aws.user) setUser(aws.user);\n      if (aws.epicurl) setEpicurl(aws.epicurl);\n      if (aws.region) setRegion(aws.region);\n      if (aws.access_key) setAccesskey(aws.access_key);\n      if (aws.secret_key) setSecretkey(aws.secret_key);\n\n      // Check if requirements are available\n      let cmds = [];\n      required.forEach( req => cmds.push(commandToCheck(req)) );\n      setLoading(true);\n      runMultiCommand(cmds)\n        .then(result => {\n          let [ out, err ] = getCommandOutput(result);\n          if (err) sendError(err);\n          if (out) {\n            sendOutput(out);\n            let found = [];\n            out.split('\\n').forEach(line => {\n              if (line.match(/^\\/\\w+/)) // if path starts with / (returned from which command)\n              found.push(line.trim().split('/').pop()); // extract command name from path\n            })\n            setCommands(found);\n          }\n        });\n      setLoading(false);\n    };\n    fetchData();\n  }, []);\n\n  const verifyNeed = async (n) => {\n    const need = JSON.parse(n);\n    setLoading(true);\n    let result = await installNeeded(need);\n    setLoading(false);\n    if (result) {\n      setCommands(old => [...old, need.command]);\n    }\n  }\n\n  const updateRepoFiles = () => {\n    let commands = [\n      '[ -d ' + repodir + ' ] || git clone -q ' + repourl + ' ' + repodir,\n      'pushd ' + repodir + ' > /dev/null', // enter the repodir\n      // 'cp ./etc/postcreate.sh_template ./etc/postcreate.sh',\n      'sed \\'s/eu-west-3/' + region + '/\\' ./etc/bluedata_infra.tfvars_example > ./etc/bluedata_infra.tfvars',\n      'sed -i.bak \\'s|^epic_dl_url.*=.*$|epic_dl_url = \"' + epicurl.replace(/\\&/g, '\\\\&') + '\"|\\' ./etc/bluedata_infra.tfvars', // escape url string with |\n      'sed -i.bak \\'s/<<your-name>>/' + user + '/g\\' ./etc/bluedata_infra.tfvars'\n    ];\n    commands.push('echo tfvars updated');\n    commands.push(tfcommand('init'));\n    commands.push('popd > /dev/null'); // exit the repodir\n    runMultiCommand(commands)\n      .then(result => sendOutput(result) && setReady(true))\n      .catch(err => sendError(err.message));\n  }\n\n  const saveConfigState = () => {\n    let aws = { };\n    aws.access_key = accesskey;\n    aws.secret_key = secretkey;\n    aws.region = region;\n    aws.user = user;\n    aws.epicurl = epicurl;\n    saveToStore('aws', JSON.stringify(aws));\n    // Update aws cli configuration/credentials\n    runMultiCommand([\n      'aws configure set region ' + aws['region'],\n      'aws configure set aws_access_key_id ' + aws['access_key'],\n      'aws configure set aws_secret_access_key ' + aws['secret_key']\n    ])\n      .then(result => sendOutput(result))\n      .catch(error => sendError(error.message));\n      sendStatus('aws settings are saved');\n    };\n    \n  const prepare = () => {\n    setLoading(true); // TODO: This is not working as expected\n    saveConfigState();\n    updateRepoFiles();\n    setLoading(false);\n  }\n\n  const deploy = () => {\n    let commands = [\n      'pushd ' + repodir + ' > /dev/null',\n      'PATH=\"$PATH\":\"$(python3 -m site --user-base)/bin\" ./bin/create_new_environment_from_scratch.sh',\n      'popd > /dev/null'\n    ]\n    runMultiCommand(commands)\n      .then(result => {\n        sendOutput(result);\n      })\n      .catch(error => sendError(error.message));\n  }\n\n  return (\n    <Box pad='xsmall' fill flex={false}>\n      { loading && <Layer animation='fadeIn' onEsc={ setLoading(false) } ><Spinning size='large' /></Layer> }\n      {\n        required.map(req => \n          <Box margin='xsmall' direction='row' key={ req.command } justify='between' align='center' >\n            <Text >{ req.command }</Text>\n            <Box direction='row' align='center'>\n              <Button \n                disabled={ loading || commands.includes(req.command) } \n                label={ commands.includes(req.command) ? 'Ready' : 'Install' }\n                color={ commands.includes(req.command) ? '' : 'plain' }\n                id={ JSON.stringify(req) }\n                onClick={ event => verifyNeed(event.target.id) }\n              />\n              { commands.includes(req.command) ? <StatusGood color='status-ok' /> : <StatusWarning color='status-warning' />}\n            </Box>\n          </Box>\n        )\n      }\n      \n      { // display if all requirements are met\n      (required.length === commands.length) &&\n      <Box>\n        <TextInput placeholder='Access Key' value={ accesskey } onChange={ event => setAccesskey(event.target.value) } />\n        <TextInput placeholder='Secret Key' value={ secretkey } onChange={ event => setSecretkey(event.target.value) } />\n        <TextInput placeholder='User' value={ user } onChange={ event => setUser(event.target.value) } />\n        <TextInput placeholder='EPIC Download URL' value={ epicurl } onChange={ event => setEpicurl(event.target.value) } />\n        { regions &&\n          <Select placeholder='Select Region' options={ regions } value={ region } onChange={ ({ option }) => setRegion(option)} />\n        }\n        <Button \n          onClick={ () => prepare() }\n          label='Prepare'\n          secondary reverse hoverIndicator\n          icon={ <Next /> }\n        />\n      </Box>\n      }\n      {\n        ready && \n        <Button \n          onClick={ deploy }\n          type='button' \n          color='plain' \n          label='Deploy on AWS' \n          icon={ <Amazon /> } />\n      }\n    </Box>\n  )\n}",["99","100"],"/Users/erdincka/Desktop/ecp-spray/src/Kvm.js",["101"],"import React, { useState } from 'react';\nimport { Box, Button, Layer } from 'grommet';\nimport Config from './kvm_config';\nimport Target from './host_target';\nimport Requirements from './kvm_requirements';\nimport { readFromStore, runCommand, sendError, sendOutput } from './helpers';\nimport { Spinning } from 'grommet-controls';\nimport { Platforms } from './Platforms';\n\nexport const Kvm = () => {\n  const [ page, setPage ] = useState('target');\n  const [ ready, setReady ] = useState(false);\n  const [ loading, setLoading ] = React.useState(false);\n  \n  const repourl = Platforms.find(p => p.name === 'kvm').url;\n  const repodir = repourl.split('/').slice(-1); //'hcp-demo-kvm-shell';\n\n  const deploy = async () => {    \n    const replace = (obj) => {\n      let patterns = [];\n      Object.keys(obj).forEach( val => {\n        const replaceVal = '\\'s|^' + val + '\\\\s*=.*$|' + val + '=\"' + obj[val].replace(/\\&/g, '\\\\&') + '\"|\\'';\n        patterns.push(replaceVal);\n      })\n      return patterns;\n    }\n\n    setLoading(true);\n\n    runCommand('[ -d '+ repodir + ' ] || git clone -q ' + repourl + ' ' + repodir)\n    .then( async res => {\n      // cancel if we can't find repo files\n      if (res.stderr) {\n        sendError(res.stderr);\n      }\n      else { // safe to proceed\n        let kvm = JSON.parse(await readFromStore('kvm'));\n\n        // TODO: implement CIDR in original kvm scripts\n        [ kvm.GATW_PUB_IP, kvm.GATW_PUB_PREFIX ] = kvm.GATW_PUB_CIDR.split('/');\n        delete kvm.GATW_PUB_CIDR;\n        // TODO: implement full hostname in original kvm scripts\n        const [ host, ...domain ] = kvm.GATW_PUB_FQDN.split('.');\n        kvm.GATW_PUB_HOST = host;\n        kvm.PUBLIC_DOMAIN = domain.join('.');\n        delete kvm.GATW_PUB_FQDN;\n        // TODO: implement URL desconstruction in original kvm scripts\n        kvm.CENTOS_FILENAME = kvm.CENTOS_DL_URL.split('/').pop();\n        kvm.EPIC_FILENAME = kvm.EPIC_DL_URL.split('/').pop();\n\n        // combine all replacements in single command\n        const cmd = 'sed -i.bak -e ' + replace(kvm).join(' -e ') +  ' ./' + repodir + '/etc/kvm_config.sh';\n        \n        runCommand(cmd)\n          .then(res => {\n            if (res.stdout) sendOutput(res.stdout);\n            if (res.stderr) sendError(res.stderr) && setLoading(false);\n            else {\n              runCommand(`pushd ${repodir}; TERM=xterm PATH=$PATH:$(python3 -m site --user-base)/bin ./kvm_create_new.sh; popd`)\n              .then( res => {\n                // console.dir(res);\n                setLoading(false);\n                if (res.stdout) sendOutput(res.stdout);\n                if (res.stderr) sendError(res.stderr);\n              })\n              .catch( err => sendError(err.message));\n            }\n          })\n          .catch(err => sendError(err.message));\n      }\n    });\n  }\n\n  return (\n    <Box fill pad='small'>\n      { loading && <Layer animation='fadeIn' ><Spinning size='large' /></Layer> }\n      { page === 'target' && <Target setParent={ (t) => { if (t) setPage('requirements') } } /> }\n      { page === 'requirements' && <Requirements setParent={ (t) => { if (t) setPage('kvm') } } /> }\n      { page === 'kvm' && <Config conf={ page } setParent={ (t) => { if (t) setReady(true) } } /> }\n      { ready &&\n        <Button \n          onClick={ () => deploy() }\n          primary\n          label='Start deployment' \n        />\n      }\n    </Box>\n  );\n}\n",["102","103"],"/Users/erdincka/Desktop/ecp-spray/src/kvm_requirements.js",[],"/Users/erdincka/Desktop/ecp-spray/src/helpers.js",[],"/Users/erdincka/Desktop/ecp-spray/src/Platforms.js",[],"/Users/erdincka/Desktop/ecp-spray/src/azure_requires.js",[],"/Users/erdincka/Desktop/ecp-spray/src/Home.js",[],["104","105"],"/Users/erdincka/Desktop/ecp-spray/src/vmware_requires.js",[],"/Users/erdincka/Desktop/ecp-spray/src/App.js",[],"/Users/erdincka/Desktop/ecp-spray/src/VMWare.js",["106","107"],"/Users/erdincka/Desktop/ecp-spray/src/defaultHost.js",[],"/Users/erdincka/Desktop/ecp-spray/src/host_target.js",[],["108","109"],{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":121,"column":78,"nodeType":"116","messageId":"117","endLine":121,"endColumn":79,"suggestions":"118"},{"ruleId":"110","replacedBy":"119"},{"ruleId":"112","replacedBy":"120"},{"ruleId":"110","replacedBy":"121"},{"ruleId":"112","replacedBy":"122"},{"ruleId":"110","replacedBy":"123"},{"ruleId":"112","replacedBy":"124"},{"ruleId":"114","severity":1,"message":"115","line":94,"column":78,"nodeType":"116","messageId":"117","endLine":94,"endColumn":79,"suggestions":"125"},{"ruleId":"110","replacedBy":"126"},{"ruleId":"112","replacedBy":"127"},{"ruleId":"114","severity":1,"message":"115","line":22,"column":89,"nodeType":"116","messageId":"117","endLine":22,"endColumn":90,"suggestions":"128"},{"ruleId":"110","replacedBy":"129"},{"ruleId":"112","replacedBy":"130"},{"ruleId":"110","replacedBy":"131"},{"ruleId":"112","replacedBy":"132"},{"ruleId":"114","severity":1,"message":"115","line":80,"column":89,"nodeType":"116","messageId":"117","endLine":80,"endColumn":90,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":123,"column":7,"nodeType":"116","messageId":"136","endLine":123,"endColumn":87},{"ruleId":"110","replacedBy":"137"},{"ruleId":"112","replacedBy":"138"},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"no-useless-escape","Unnecessary escape character: \\&.","Literal","unnecessaryEscape",["141","142"],["139"],["140"],["139"],["140"],["139"],["140"],["143","144"],["139"],["140"],["145","146"],["139"],["140"],["139"],["140"],["147","148"],"no-template-curly-in-string","Unexpected template string expression.","unexpectedTemplateExpression",["139"],["140"],"no-global-assign","no-unsafe-negation",{"messageId":"149","fix":"150","desc":"151"},{"messageId":"152","fix":"153","desc":"154"},{"messageId":"149","fix":"155","desc":"151"},{"messageId":"152","fix":"156","desc":"154"},{"messageId":"149","fix":"157","desc":"151"},{"messageId":"152","fix":"158","desc":"154"},{"messageId":"149","fix":"159","desc":"151"},{"messageId":"152","fix":"160","desc":"154"},"removeEscape",{"range":"161","text":"162"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"163","text":"164"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"165","text":"162"},{"range":"166","text":"164"},{"range":"167","text":"162"},{"range":"168","text":"164"},{"range":"169","text":"162"},{"range":"170","text":"164"},[5214,5215],"",[5214,5214],"\\",[4158,4159],[4158,4158],[906,907],[906,906],[2921,2922],[2921,2921]]